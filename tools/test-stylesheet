#!/usr/bin/env ruby

require 'css_parser'
require 'wcag_color_contrast'
require 'chroma'
include CssParser

parser = CssParser::Parser.new
parser.load_file!(ARGV[0]);

bg_selector = '.highlight'
bg_rules = RuleSet.new(nil, parser.find_by_selector(bg_selector)[0])
calculator = WCAGColorContrast::Ratio.new
bg_color = bg_rules.get_value('background').chomp(';')[1..-1]
bg_color_relative_luminance = calculator.relative_luminance(bg_color)

parser.each_selector do |selector, declarations, specificity|
  if selector == bg_selector
    next
  end
  type_rules = RuleSet.new(nil, declarations)
  color = type_rules.get_value('color').chomp(';')[1..-1]
  if !color
    next
  end

  color_relative_luminance = calculator.relative_luminance(color)
  ratio = calculator.ratio(color, bg_color)

  if ratio < 4.5
    original = ratio
    recommendation = color
    while ratio < 4.5
      if bg_color_relative_luminance < color_relative_luminance
        recommendation = recommendation.paint.lighten(1).to_s[1..-1]
      else
        recommendation = recommendation.paint.darken(1).to_s[1..-1]
      end
      ratio = calculator.ratio(recommendation, bg_color)
    end
    puts 'Insufficient contrast | Selector: ' + selector +
      ' | Ratio: ' + original.to_s +
      ' | Color: ' + color +
      ' | Background: ' + bg_color +
      ' | Recommendation: ' + recommendation
  end

end
